---
- name: Development Environment Setup
  hosts: all
  become: true
  become_user: root
  gather_facts: true
  vars:
    user: user
    javaVersion: 21

  tasks:
    - name: Set timezone to Asia/Taipei
      community.general.timezone:
        name: Asia/Taipei

    - name: Create tmp Directory
      file: 
        path: "{{ item }}"
        recurse: yes
        state: directory
      with_list:
        - /tmp/source/

    - include_tasks: "../tasks/{{ outer_item.yml }}.yml" 
      # args:
      #   apply:
      #     become: true
      #     tags:
      #       - always
#      when: hostvar is defined
      vars:
        param: "{{ outer_item.package }}"
        pwd: "{{ lookup('env', 'PWD') }}"

      with_items:
          # Pre-requisite
        - yml: package
          package:
            - {name: gnupg, service: false, prerequisite: false, config: false, final: false, os: false}
            - {name: curl, service: false, prerequisite: false, config: false, final: false, os: false}
            - {name: ca-certificates, service: false, prerequisite: false, config: false, final: false, os: false}
            - {name: git, service: false, prerequisite: false, config: false, final: false, os: false}
            - {name: [build-essential, libssl-dev, libffi-dev, libfuse2], service: false, prerequisite: false, config: false , final: false, os: ['Debian']}
            - {name: [yum-utils], service: false, prerequisite: false, config: false , final: false, os: ['RedHat']}
#            - {name: [epel-release, snapd], service: false, prerequisite: false,
#               config: { name: snap, args: "", os: false, skipIfExists: "/tmp/ansible-snap-config-completed" }, os: ['RedHat']}
          # Generic Package
        - yml: package
          package:
            - {name: open-vm-tools-desktop, service: false, prerequisite: false, config: false, final: false, os: false}
            - {name: [python3, python3-pip], service: false, prerequisite: false, config: false, final: false, os: false}
            - {name: [python3-dev], service: false, prerequisite: false, config: false, final: false, os: ['Debian']}
            - {name: [python3-devel], service: false, prerequisite: false, config: false, final: false, os: ['RedHat']}
            - {name: "openjdk-{{ javaVersion }}-jdk", service: false, prerequisite: false, config: false, final: false, os: ['Debian']}
            - {name: "java-{{ javaVersion }}-openjdk", service: false, prerequisite: false, config: false, final: false, os: ['RedHat']}
            - {name: nginx, service: nginx, prerequisite: false, config: false, final: false, os: false}
            - {name: mongodb-org, service: mongod,
              prerequisite: { name: mongodb, args: "7.0 {{ ansible_distribution_major_version }}", os: false, skipIfExists: "/tmp/ansible-mongodb-prerequisite-completed"},
              config: { name: mongodb, args: "", os: false, skipIfExists: "/tmp/ansible-mongodb-config-completed"}, final: false, os: false }
            - {name: [docker-ce, docker-ce-cli, containerd.io, docker-buildx-plugin, docker-compose-plugin], service: docker,
              prerequisite: { name: docker, args: "", os: false, skipIfExists: "/tmp/ansible-docker-prerequisite-completed" },
              final: { name: docker, args: "{{ user }}", os: false, skipIfExists: "/tmp/ansible-docker-patch-completed"}, config: false, os: false }
            - {name: mariadb-server, service: mariadb, prerequisite: false, config: false, final: false, os: false}
            - {name: mariadb-client, service: false,
               prerequisite: { name: mongodb, args: "", os: ['RedHat'], skipIfExists: "/tmp/ansible-mariadb-prerequisite-completed"},
               config: false, final: false, os: ['Debian']}
            - {name: [kubeadm, kubelet, kubectl], service: kubelet, 
              prerequisite: { name: kubernetes, args: "", os: false, skipIfExists: "/tmp/ansible-kubernetes-prerequisite-completed" },
              config: false, final: false, os: false}
            - {name: [code], service: false,
               prerequisite: { name: code, args: "", os: false, skipIfExists: "/tmp/ansible-code-prerequisite-completed"},
               config: false, final: false, os: false}
            - {name: [nodejs], service: false,
               prerequisite: { name: nodejs, args: "20", os: false, skipIfExists: "/tmp/ansible-nodejs-prerequisite-completed"},
               config: false, final: false, os: false}
              # config: { name: kubernetes, args: "{{ user }}", skipIfExists: /etc/xxx } }
            # - {name: php, service: false}
        - yml: script-as-root
          package:
            - {name: jetbrains-toolbox, args: "", skipIfExists: "/opt/jetbrains/jetbrains-toolbox"}
            - {name: minikube, args: "", skipIfExists: "/usr/local/bin/minikube"}
            - {name: golang, args: "", skipIfExists: "/usr/local/go/bin/go"}
            - {name: android-studio, args: "2023.1.1.28", skipIfExists: "/opt/android-studio/bin/studio.sh"}
            - {name: vmware, args: "{{ user }}", skipIfExists: "/tmp/ansible-vmware-script-completed"}
            - {name: tomcat, args: "{{ user }} 10.1.19 {{ javaVersion }}", skipIfExists: "/opt/tomcat/bin/startup.sh"}

        - yml: script-as-user
          package:
            - {name: rust, args: "", skipIfExists: "/home/{{ user }}/.cargo/bin/rustup"}
            - {name: bun, args: "", skipIfExists: "/home/{{ user }}/.bun/bin/bun"}
            - {name: deno, args: "", skipIfExists: "/home/{{ user }}/.deno/bin/deno"}
        # - yml: snap
        #   package:
#            - code
#            - go
#            - node
#            - deno
#            - android-studio

        - yml: npm
          package:
            - {name: "yarn", args: "", skipIfExists: "/usr/local/bin/yarn"}
            - {name: "@angular/cli", args: "", skipIfExists: "/usr/local/bin/ng"}

        - yml: vs-code-extension
          package:
            - mhutchie.git-graph
            - donjayamanne.githistory
            - GitHub.copilot
            - GitHub.copilot-chat
            - ms-azuretools.vscode-docker

        - yml: minikube-addon
          package:
            - dashboard
            - ingress

        - yml: pip3
          package:
            - virtualenv
            
      loop_control:
        loop_var: outer_item